import type { Plugin } from "vite";
import fs from "node:fs";
import path from "node:path";

interface Options {
  /**
   * Path to the public directory (relative to project root).
   * @default 'public'
   */
  publicDir?: string;
  /**
   * Path to the generated file (relative or absolute).
   * @default 'src/generated.ts'
   */
  output?: string;
  /**
   * Name of the TypeScript type to generate.
   * @default 'PublicAssets'
   */
  variableName?: string;
}

function publicAssetsPlugin(options: Options = {}): Plugin {
  const publicDir = options.publicDir ?? "public";
  const output = options.output ?? "src/generated.ts";
  const varName = options.variableName ?? "PublicAssets";

  return {
    name: "vite-plugin-public-assets-types",
    enforce: "pre",
    async buildStart() {
      const dir = path.resolve(process.cwd(), publicDir);
      const files: string[] = [];

      function walk(current: string) {
        for (const name of fs.readdirSync(current)) {
          const fullPath = path.join(current, name);
          const stat = fs.statSync(fullPath);
          if (stat.isDirectory()) {
            walk(fullPath);
          } else {
            const relPath = path
              .relative(dir, fullPath)
              .split(path.sep)
              .join("/");
            files.push(`/${relPath}`);
          }
        }
      }

      if (fs.existsSync(dir)) {
        walk(dir);
      }

      // Build the union type source
      const unionLines: string[] = [];
      unionLines.push(
        "// Generated by vite-plugin-public-assets-types. Do not edit."
      );
      unionLines.push(`export type ${varName} =`);
      files.forEach((f, idx) => {
        const suffix = idx === files.length - 1 ? ";" : " |";
        unionLines.push(`  "${f}"${suffix}`);
      });
      unionLines.push("");

      // Ensure the output directory exists
      const outDir = path.dirname(output);
      fs.mkdirSync(outDir, { recursive: true });
      // Write the generated file
      fs.writeFileSync(output, unionLines.join("\n"));
    },
  };
}

export { publicAssetsPlugin };
export default publicAssetsPlugin;
